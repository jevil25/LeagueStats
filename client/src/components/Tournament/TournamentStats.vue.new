<template>
  <div class="tournament-stats bg-gradient-to-b from-blue-800 to-blue-900 rounded-lg p-6 shadow-lg border border-blue-700/50">
    <h3 class="text-lg font-bold text-white mb-6 flex items-center gap-2">
      <svg class="h-5 w-5 text-teal-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
      </svg>
      Tournament Stats
    </h3>
    
    <div class="grid grid-cols-2 gap-4 mb-8">
      <div class="stat-card bg-blue-950/50 backdrop-blur-sm rounded-lg p-4 text-center border border-blue-700/30 hover:border-blue-600/50 transition-colors duration-200">
        <div class="text-3xl font-bold text-teal-400 mb-1">{{ totalMatches }}</div>
        <div class="text-sm text-blue-300 font-medium">Total Matches</div>
      </div>
      <div class="stat-card bg-blue-950/50 backdrop-blur-sm rounded-lg p-4 text-center border border-blue-700/30 hover:border-blue-600/50 transition-colors duration-200">
        <div class="text-3xl font-bold text-teal-400 mb-1">{{ uniqueTeams }}</div>
        <div class="text-sm text-blue-300 font-medium">Teams</div>
      </div>
    </div>

    <div v-if="topTeams.length" class="mb-8">
      <h4 class="text-md font-semibold text-white mb-4 flex items-center gap-2">
        <svg class="h-5 w-5 text-teal-400" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clipRule="evenodd" />
        </svg>
        Top Teams
      </h4>
      <div class="space-y-3">
        <div 
          v-for="team in topTeams" 
          :key="team.id"
          class="flex items-center justify-between p-3 rounded-lg bg-blue-950/30 border border-blue-800/50 hover:bg-blue-900/30 transition-colors duration-200"
        >
          <div class="flex items-center space-x-3">
            <img 
              v-if="team.logoUrl"
              :src="team.logoUrl" 
              :alt="team.name"
              class="h-8 w-8 rounded-full bg-blue-900 object-cover border border-blue-700/50"
            />
            <div v-else class="flex h-8 w-8 items-center justify-center rounded-full bg-blue-900 text-lg font-bold text-blue-300 border border-blue-700/50">
              {{ team.name.charAt(0) }}
            </div>
            <span class="text-sm font-medium text-blue-100">{{ team.name }}</span>
          </div>
          <span class="text-sm text-teal-400 font-bold">{{ team.matches }} matches</span>
        </div>
      </div>
    </div>

    <div v-if="upcomingMatches.length">
      <h4 class="text-md font-semibold text-white mb-4 flex items-center gap-2">
        <svg class="h-5 w-5 text-teal-400" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
        </svg>
        Upcoming Matches
      </h4>
      <div class="space-y-3">
        <div 
          v-for="match in upcomingMatches" 
          :key="match.id"
          class="p-3 rounded-lg bg-blue-950/30 border border-blue-800/50 hover:bg-blue-900/30 transition-colors duration-200"
        >
          <div class="flex justify-between items-center mb-2 text-xs">
            <div class="text-blue-300">
              {{ new Date(match.startTimeScheduled).toLocaleDateString() }}
            </div>
            <div class="text-teal-400 font-medium">{{ match.format?.nameShortened }}</div>
          </div>
          <div class="flex justify-between items-center text-sm font-medium">
            <div class="text-blue-100">{{ match.teams[0]?.baseInfo?.name || 'TBD' }}</div>
            <div class="text-blue-400 text-xs px-3">vs</div>
            <div class="text-blue-100">{{ match.teams[1]?.baseInfo?.name || 'TBD' }}</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'TournamentStats',
  
  props: {
    series: {
      type: Array,
      required: true
    }
  },

  mounted() {
    console.log('TournamentStats mounted', {
      seriesLength: this.series?.length || 0,
      hasData: this.series && this.series.length > 0
    })
  },

  watch: {
    series: {
      immediate: true,
      handler(newSeries) {
        console.log('TournamentStats series changed', {
          length: newSeries?.length || 0,
          hasData: newSeries && newSeries.length > 0
        })
      }
    }
  },

  computed: {
    totalMatches() {
      return this.series.length
    },

    uniqueTeams() {
      const teams = new Set()
      this.series.forEach(match => {
        match.teams.forEach(team => {
          if (team.baseInfo?.id) {
            teams.add(team.baseInfo.id)
          }
        })
      })
      return teams.size
    },

    topTeams() {
      const teamStats = {}
      this.series.forEach(match => {
        match.teams.forEach(team => {
          if (team.baseInfo?.id) {
            if (!teamStats[team.baseInfo.id]) {
              teamStats[team.baseInfo.id] = {
                id: team.baseInfo.id,
                name: team.baseInfo.name,
                logoUrl: team.baseInfo.logoUrl,
                matches: 0
              }
            }
            teamStats[team.baseInfo.id].matches++
          }
        })
      })
      
      return Object.values(teamStats)
        .sort((a, b) => b.matches - a.matches)
        .slice(0, 5)
    },

    upcomingMatches() {
      const now = new Date()
      return this.series
        .filter(match => new Date(match.startTimeScheduled) > now)
        .sort((a, b) => new Date(a.startTimeScheduled) - new Date(b.startTimeScheduled))
        .slice(0, 3)
    }
  }
}
</script>
